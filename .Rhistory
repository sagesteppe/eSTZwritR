cities.sf <- sf::st_crop(cities.sf, x)
}
if(ecoregions == TRUE){
omernik <- sf::st_transform(omernik, sf::st_crs(x))
sf::st_agr(omernik) <- 'constant'
omernik <- sf::st_crop(omernik, extent)
}
# ggplot does the cropping to an extent, but we'll manually specify the borders
# and what data we want here.
countries <- spData::world |>
dplyr::filter(iso_a2 %in% c('CA', 'US', 'MX')) |>
dplyr::select(name_long) |>
sf::st_transform(sf::st_crs(x))
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(x))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(
data = x,
ggplot2::aes(fill = factor(zone)),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = 'cornsilk',
lwd = 0.25,
color = 'black',
alpha = 0.5) +
suppressMessages(ggspatial::annotation_scale(location = "br", width_hint = 0.25)) +
ggspatial::annotation_north_arrow(
location = "br", which_north = "true",
pad_x = ggplot2::unit(0.25, "in"), pad_y = ggplot2::unit(0.25, "in"),
height = ggplot2::unit(0.35, "in"), width = ggplot2::unit(0.35, "in")
)
caption <- paste0(caption, '. CRS: ', sf::st_crs(acth7)[[1]])
states_only <- '\nStates data courtesy of US Census Bureau'
ecoTcityF <- '. Omernik ecoregions courtesy of US EPA'
ecoFcityT <- '. Cities courtesy of Simplemaps.com'
ecoTcityT <- '. Omernik ecoregions courtesy of US EPA. Cities courtesy of Simplemaps.com'
#determine the correct caption format for the data.
if(exists('caption')){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, states_only, ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, states_only, ecoTcityT)
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(states_only, ecoTcityT)
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(data = omernik,
fill = NA, lty = 3, linewidth = 0.5, color = 'grey30') +
ggplot2::labs(caption = caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
#    size = 3.5,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.5, color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
#      size = 3.5,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else {
p <- p +
ggplot2::labs(caption = caption)
}
#  add on style elements which would be overwritten by the above code.
p <- p + ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F
) +
ggplot2::labs(
x = NULL, y = NULL, fill = 'Transfer\nZone',
title = paste0('*', species, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "aliceblue"),
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5),
legend.title = ggplot2::element_text(hjust = 0.5)
)
# Determine where to put the legend. Added to the size of Portrait Plots,
# the base of landscape Plots.
if(landscape == TRUE){
p <- p + ggplot2::theme(legend.position='right')
} else {
p <- p + ggplot2::theme(
legend.position='bottom',
legend.justification = "left",
)
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else {
ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p)
}
mapmakR(acth7,
species = 'Eriocoma thurberiana',
save = TRUE,
ecoregions = TRUE,
cities = TRUE,
landscape = F,
caption = 'Data from Johnson et al. 2017')
usethis::use_package(patchwork, type = 'suggests')
usethis::use_package('patchwork', type = 'suggests')
usethis::use_package('patchwork', type = 'suggests')
usethis::use_package('lwgeom')
usethis::use_package('lwgeom', type = 'suggests')
roxygen2::roxygenise()
rcmdcheck::rcmdcheck()
usethis::use_package('ggrepel')
roxygen2::roxygenise()
usethis::use_github_actions()
usethis::use_github_action()
usethis::use_citation()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(5)
library(eSTZwritR)
library(tidyverse)
library(sf)
library(patchwork)
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
# This step was already run during creation of the package. simple feature
# geometries have certain rules about what constitutes a valid geometry. One
# of the most important rules (or at least the most violated) is that a polygon
# should not cross itself. We can easily fix that and several other types of
# errors using sf::st_make_valid() - this should be a common part of any spatial
# analysts workflow.
acth7 <- sf::st_make_valid(acth7)
# We also want to ensure that spatially contiguous polygons of the same seed zone
# are merged. This allows for more accurate assessments of the area covered by
# each seed zone in traditional data.frame/tibble type calculations. It also
# allows us to provide a unique ID to each polygon.
polygonsStart <- nrow(acth7)
acth7 <- acth7 |>
# first we define a grouping variable, all polygons from these levels will be combined
group_by(zone) |>
# now we union (or dissolve) all polygons by the levels specified above, into
# one multipolygon object per level.
summarise(geom = st_union(geom)) |>
# now we split apart the multipolygon into contiguous pieces.
st_cast('POLYGON') |>
# just making sure everything goes OK.
st_make_valid()
polygonsEnd <- nrow(acth7)
message('\nThis data set now has: ', polygonsStart - polygonsEnd, ' fewer polygons')
# You'll notice we lost some info!
# We lost columns containing the GRIDCODE - this is from when the data were converted
# from raster, area_ha, and ID for each polygon. The area_ha can be recalculated,
# and we can create new ID's for the polygons. We could use a left join to get the
# GRIDCODE back on. BUT take this is a lesson, some of these polygon geometry
# maintenance steps should be done early! Realistically before many analysis in
# the paper are done perhaps! We'll show you how to make some new IDs and
# calculate the areas again.
acth7 <- mutate(acth7, ID = 1:nrow(acth7), .before = 1)
# we can calculate the area like this
acth7 <- sf::st_transform(acth7, 5070) # we will put the data into an Equal area projection
# this type of projection minimizes the distortion of area.
# now we calculate the area using geodesic_areas (accounting for the curvature of the earth)
# we then convert the data into 'hectares' and will then drop some data attributes.
# see ?units for more info.
acth7 <- mutate(acth7, area_ha =
as.numeric(
units::set_units(
st_area(acth7), "hectare")), .before = geom)
# here we go! geodesic areas calculated from an equal area projection! This should
# be pretty well representative of how large each polygon is.
# now we will convert these data back to geographic coordinates system WGS84
acth7 <- sf::st_transform(acth7, 4326)
rm(polygonsStart, polygonsEnd)
rc <- regionCoding(acth7)
str(rc) # the returned data is a list of two objects, a vector and a data frame.
# Either format works to extract the data from the list.
rc$SuggestedName == rc[['SuggestedName']]
# I use this method (less typing), even though I like the look of the other method more...
rc$SuggestedName
knitr::kable(rc$RegionsCovered)
oz <- orderZones(acth7, SeedZone = zone, n = 1000)
# oz$Summary # i use kable so this looks nice online,
# just run oz$Summary to print to console.
knitr::kable(oz$Summary)
oz$PlotKruskal
oz$PlotDunns
p1 <- ggplot(data = acth7, aes(fill = zone)) +
geom_sf(color = NA) +
theme_void() +
scale_fill_distiller(palette = "RdYlGn", direction = 1) +
labs(title = 'Original')
p2 <- ggplot(data = oz$Reclassified, aes(fill = zone)) +
geom_sf(color = NA) +
theme_void() +
scale_fill_distiller(palette = "RdYlGn", direction = 1) +
labs(title = 'Ordered')
p1 + p2
rm(p1, p2)
acth7 <- oz$Reclassified
acth7_clean <- fieldsmakR(acth7, SeedZone = 'zone')
head(acth7_clean)
acth7_stuff <- acth7 |>
dplyr::mutate(
bio1_range = runif(n = dplyr::n()),
bio12_avg = runif(n = dplyr::n()),
bio9_m = runif(n = dplyr::n()),
)
fieldsmakR(acth7_stuff, SeedZone = 'zone')
rm(acth7_stuff, acth7)
rm(rc)
map <- mapmakR(
acth7_clean,
species = 'Eriocoma thurberiana', # this will become the title.
save = FALSE, # whether to write to disk, defaults to TRUE
landscape = FALSE, # defaults ot TRUE, we want a landscape page
ecoregions = TRUE, # whether to add unlabeled L4 ecoregions or not.
cities = TRUE, # whether to add some cities to the map
caption =
'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
# Cite where the data comes from!!! A doi would be great too ;-) !
)
knitr::include_graphics("./images/Eriocoma_thurberiana_STZmap.pdf")
# install.packages('devtools')
devtools::install_github('sagesteppe/eSTZwritR')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(5)
library(eSTZwritR)
library(tidyverse)
library(sf)
library(patchwork)
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
# This step was already run during creation of the package. simple feature
# geometries have certain rules about what constitutes a valid geometry. One
# of the most important rules (or at least the most violated) is that a polygon
# should not cross itself. We can easily fix that and several other types of
# errors using sf::st_make_valid() - this should be a common part of any spatial
# analysts workflow.
acth7 <- sf::st_make_valid(acth7)
# We also want to ensure that spatially contiguous polygons of the same seed zone
# are merged. This allows for more accurate assessments of the area covered by
# each seed zone in traditional data.frame/tibble type calculations. It also
# allows us to provide a unique ID to each polygon.
polygonsStart <- nrow(acth7)
acth7 <- acth7 |>
# first we define a grouping variable, all polygons from these levels will be combined
group_by(zone) |>
# now we union (or dissolve) all polygons by the levels specified above, into
# one multipolygon object per level.
summarise(geom = st_union(geom)) |>
# now we split apart the multipolygon into contiguous pieces.
st_cast('POLYGON') |>
# just making sure everything goes OK.
st_make_valid()
polygonsEnd <- nrow(acth7)
message('\nThis data set now has: ', polygonsStart - polygonsEnd, ' fewer polygons')
# You'll notice we lost some info!
# We lost columns containing the GRIDCODE - this is from when the data were converted
# from raster, area_ha, and ID for each polygon. The area_ha can be recalculated,
# and we can create new ID's for the polygons. We could use a left join to get the
# GRIDCODE back on. BUT take this is a lesson, some of these polygon geometry
# maintenance steps should be done early! Realistically before many analysis in
# the paper are done perhaps! We'll show you how to make some new IDs and
# calculate the areas again.
acth7 <- mutate(acth7, ID = 1:nrow(acth7), .before = 1)
# we can calculate the area like this
acth7 <- sf::st_transform(acth7, 5070) # we will put the data into an Equal area projection
# this type of projection minimizes the distortion of area.
# now we calculate the area using geodesic_areas (accounting for the curvature of the earth)
# we then convert the data into 'hectares' and will then drop some data attributes.
# see ?units for more info.
acth7 <- mutate(acth7, area_ha =
as.numeric(
units::set_units(
st_area(acth7), "hectare")), .before = geom)
# here we go! geodesic areas calculated from an equal area projection! This should
# be pretty well representative of how large each polygon is.
# now we will convert these data back to geographic coordinates system WGS84
acth7 <- sf::st_transform(acth7, 4326)
rm(polygonsStart, polygonsEnd)
rc <- regionCoding(acth7)
str(rc) # the returned data is a list of two objects, a vector and a data frame.
# Either format works to extract the data from the list.
rc$SuggestedName == rc[['SuggestedName']]
# I use this method (less typing), even though I like the look of the other method more...
rc$SuggestedName
knitr::kable(rc$RegionsCovered)
oz <- orderZones(acth7, SeedZone = zone, n = 1000)
# oz$Summary # i use kable so this looks nice online,
# just run oz$Summary to print to console.
knitr::kable(oz$Summary)
oz$PlotKruskal
oz$PlotDunns
p1 <- ggplot(data = acth7, aes(fill = zone)) +
geom_sf(color = NA) +
theme_void() +
scale_fill_distiller(palette = "RdYlGn", direction = 1) +
labs(title = 'Original')
p2 <- ggplot(data = oz$Reclassified, aes(fill = zone)) +
geom_sf(color = NA) +
theme_void() +
scale_fill_distiller(palette = "RdYlGn", direction = 1) +
labs(title = 'Ordered')
p1 + p2
rm(p1, p2)
acth7 <- oz$Reclassified
acth7_clean <- fieldsmakR(acth7, SeedZone = 'zone')
head(acth7_clean)
acth7_stuff <- acth7 |>
dplyr::mutate(
bio1_range = runif(n = dplyr::n()),
bio12_avg = runif(n = dplyr::n()),
bio9_m = runif(n = dplyr::n()),
)
fieldsmakR(acth7_stuff, SeedZone = 'zone')
rm(acth7_stuff, acth7)
rm(rc)
map <- mapmakR(
acth7_clean,
species = 'Eriocoma thurberiana', # this will become the title.
save = FALSE, # whether to write to disk, defaults to TRUE
landscape = FALSE, # defaults ot TRUE, we want a landscape page
ecoregions = TRUE, # whether to add unlabeled L4 ecoregions or not.
cities = TRUE, # whether to add some cities to the map
caption =
'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
# Cite where the data comes from!!! A doi would be great too ;-) !
)
knitr::include_graphics("./images/Eriocoma_thurberiana_STZmap.pdf")
mapmakR(acth7_clean,
species = 'Eriocoma thurberiana', # this will become the title.
outdir = '~/Documents/EmpiricalSeedZones/Eriocoma_thurberianacgSTZ/Information',
landscape = FALSE, # defaults ot TRUE, we want a landscape page
caption =
'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
# Cite where the data comes from!!! A doi would be great too ;-) !
)
dirmakR(
outpath = '~/Documents/EmpiricalSeedZones',
sci_name = 'Eriocoma_thurberiana',
x = acth7_clean,
regioncode = rc,
nrcs_code = 'ACHT7',
estz_type = 'cg',
overwrite = TRUE
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
set.seed(5)
library(eSTZwritR)
library(tidyverse)
library(sf)
library(patchwork)
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
# This step was already run during creation of the package. simple feature
# geometries have certain rules about what constitutes a valid geometry. One
# of the most important rules (or at least the most violated) is that a polygon
# should not cross itself. We can easily fix that and several other types of
# errors using sf::st_make_valid() - this should be a common part of any spatial
# analysts workflow.
acth7 <- sf::st_make_valid(acth7)
# We also want to ensure that spatially contiguous polygons of the same seed zone
# are merged. This allows for more accurate assessments of the area covered by
# each seed zone in traditional data.frame/tibble type calculations. It also
# allows us to provide a unique ID to each polygon.
polygonsStart <- nrow(acth7)
acth7 <- acth7 |>
# first we define a grouping variable, all polygons from these levels will be combined
group_by(zone) |>
# now we union (or dissolve) all polygons by the levels specified above, into
# one multipolygon object per level.
summarise(geom = st_union(geom)) |>
# now we split apart the multipolygon into contiguous pieces.
st_cast('POLYGON') |>
# just making sure everything goes OK.
st_make_valid()
polygonsEnd <- nrow(acth7)
message('\nThis data set now has: ', polygonsStart - polygonsEnd, ' fewer polygons')
# You'll notice we lost some info!
# We lost columns containing the GRIDCODE - this is from when the data were converted
# from raster, area_ha, and ID for each polygon. The area_ha can be recalculated,
# and we can create new ID's for the polygons. We could use a left join to get the
# GRIDCODE back on. BUT take this is a lesson, some of these polygon geometry
# maintenance steps should be done early! Realistically before many analysis in
# the paper are done perhaps! We'll show you how to make some new IDs and
# calculate the areas again.
acth7 <- mutate(acth7, ID = 1:nrow(acth7), .before = 1)
# we can calculate the area like this
acth7 <- sf::st_transform(acth7, 5070) # we will put the data into an Equal area projection
# this type of projection minimizes the distortion of area.
# now we calculate the area using geodesic_areas (accounting for the curvature of the earth)
# we then convert the data into 'hectares' and will then drop some data attributes.
# see ?units for more info.
acth7 <- mutate(acth7, area_ha =
as.numeric(
units::set_units(
st_area(acth7), "hectare")), .before = geom)
# here we go! geodesic areas calculated from an equal area projection! This should
# be pretty well representative of how large each polygon is.
# now we will convert these data back to geographic coordinates system WGS84
acth7 <- sf::st_transform(acth7, 4326)
rm(polygonsStart, polygonsEnd)
rc <- regionCoding(acth7)
str(rc) # the returned data is a list of two objects, a vector and a data frame.
# Either format works to extract the data from the list.
rc$SuggestedName == rc[['SuggestedName']]
# I use this method (less typing), even though I like the look of the other method more...
rc$SuggestedName
knitr::kable(rc$RegionsCovered)
oz <- orderZones(acth7, SeedZone = zone, n = 1000)
# oz$Summary # i use kable so this looks nice online,
# just run oz$Summary to print to console.
knitr::kable(oz$Summary)
oz$PlotKruskal
oz$PlotDunns
p1 <- ggplot(data = acth7, aes(fill = zone)) +
geom_sf(color = NA) +
theme_void() +
scale_fill_distiller(palette = "RdYlGn", direction = 1) +
labs(title = 'Original')
p2 <- ggplot(data = oz$Reclassified, aes(fill = zone)) +
geom_sf(color = NA) +
theme_void() +
scale_fill_distiller(palette = "RdYlGn", direction = 1) +
labs(title = 'Ordered')
p1 + p2
rm(p1, p2)
acth7 <- oz$Reclassified
acth7_clean <- fieldsmakR(acth7, SeedZone = 'zone')
head(acth7_clean)
acth7_stuff <- acth7 |>
dplyr::mutate(
bio1_range = runif(n = dplyr::n()),
bio12_avg = runif(n = dplyr::n()),
bio9_m = runif(n = dplyr::n()),
)
fieldsmakR(acth7_stuff, SeedZone = 'zone')
rm(acth7_stuff, acth7)
dirmakR(
outpath = '~/Documents/EmpiricalSeedZones',
sci_name = 'Eriocoma_thurberiana',
x = acth7_clean,
regioncode = rc,
nrcs_code = 'ACHT7',
estz_type = 'cg',
overwrite = TRUE
)
mapmakR(acth7_clean,
species = 'Eriocoma thurberiana', # this will become the title.
outdir = '~/Documents/EmpiricalSeedZones/Eriocoma_thurberianacgSTZ/Information',
landscape = FALSE, # defaults ot TRUE, we want a landscape page
caption =
'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
# Cite where the data comes from!!! A doi would be great too ;-) !
)
data.frame(
SeedZone = 1:12,
SZName = c('Arid Valley Bottoms', 'Arid Valleys',  'Central Valleys',
'Plains', 'North/Eastern Plains', 'Northern Alluvial Fans/Slopes',
'Sagebrush Steppe (lower)', 'Sagebrush Steppe (mid)', 'Sagebrush Steppe (upper)',
'Mountain (lower)', 'Moutain (mid)', 'Mountain (high)'
)
)
badger::badge_github_version(pkg='sagesteppe/eSTZwritR', 'blue')
