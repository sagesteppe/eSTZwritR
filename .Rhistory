'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid()
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
message(sf::st_crs(regions))
stop()
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
#  sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
message(sf::st_crs(regions))
stop()
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf()# |>
stop()
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
message(sf::st_crs(regions))
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf()# |>
stop()
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf()# |>
stop()
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid()
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions))# |>
stop()
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid()
regionCoding(acth7)
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
sf::st_agr(x) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions))# |>
stop()
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
sf::st_agr(x) <- 'constant' ; sf::st_agr(reg) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions))# |>
stop()
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
sf::st_agr(x) <- 'constant' ; sf::st_agr(reg) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions))# |>
stop()
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data(regions)
sf::st_agr(x) <- 'constant' ; sf::st_agr(reg) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions))# |>
stop()
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data('regions')
sf::st_agr(x) <- 'constant' ; sf::st_agr(reg) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions))# |>
stop()
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
head(regions)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
reg <- data('regions')
sf::st_agr(x) <- 'constant' ; sf::st_agr(reg) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
data('regions', envir=environment())
sf::st_agr(x) <- 'constant' ; sf::st_agr(reg) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(reg) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
data('regions', envir=environment())
sf::st_agr(x) <- 'constant' ; sf::st_agr(regions) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(regions) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
head(regions)
sf::st_crs(regions)
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
library(tidyverse)
library(sf)
regions_abb <- data.frame(
REG_NUM = 1:12,
REG_ABB = c('NAA', 'SAG', 'GL', 'MSB', 'MOB','ART',
'UCB', 'LCB', 'CPN', 'CGB', 'AK', 'PI')
)
regions <- st_read(
'doi_12_unified_regions_20180801_shapefile/DOI_12_Unified_Regions_20180801.shp') |>
select(REG_NUM, REG_NAME) |>
left_join(regions_abb) |>
sf::st_make_valid()
object.size(regions)
regions <- rmapshaper::ms_simplify(regions, keep = 0.01, keep_shapes = TRUE) |>
sf::st_transform(4326)
object.size(regions)
usethis::use_data(regions, overwrite = TRUE)
rm(regions_abb, regions)
