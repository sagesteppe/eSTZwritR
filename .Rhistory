p <- ggplot2::ggplot() +
ggplot2::geom_sf(
data = x,
ggplot2::aes(fill = factor(zone)),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = NA,
lwd = 0.25,
color = 'black',
alpha = 0.5) +
suppressMessages(ggspatial::annotation_scale(location = "br", width_hint = 0.25)) +
ggspatial::annotation_north_arrow(
location = "br", which_north = "true",
pad_x = ggplot2::unit(0.25, "in"), pad_y = ggplot2::unit(0.25, "in"),
height = ggplot2::unit(0.35, "in"), width = ggplot2::unit(0.35, "in")
)
states_only <- '\nStates data courtesy of US Census Bureau'
ecoTcityF <- '\nOmernik Ecoregions data courtesy of US EPA'
ecoFcityT <- '\nCities data courtesy of Simplemaps.com'
ecoTcityT <- '\nOmernik Ecoregions data courtesy of US EPA\nCities data courtesy of Simplemaps.com'
#determine the correct caption format for the data.
if(exists('caption')){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, states_only, ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, states_only, ecoTcityT)
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(states_only, ecoTcityT)
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.7, color = 'grey30') +
ggplot2::labs(caption = caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
suppresssWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.7, color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
suppresssWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else {
p <- p +
ggplot2::labs(caption = caption)
}
#  add on style elements which would be overwritten by the above code.
p <- p + ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F
) +
ggplot2::labs(
x = NULL, y = NULL, fill = 'Transfer\nZone',
title = paste0('*', species, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
panel.background = element_rect(fill = "aliceblue"),
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5),
legend.title = ggplot2::element_text(hjust = 0.5),
legend.position = "bottom"
)
# Determine where to put the legend. Added to the size of Portrait Plots,
# the base of landscape Plots.
if(landscape == TRUE){
p <- p + ggplot2::theme(legend.position='right')
} else {
p <- p + ggplot2::theme(legend.position='bottom')
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else {
ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
ob <- mapmakR(acth7,
species = 'Eriocoma thurberiana',
save = TRUE,
landscape = FALSE,
ecoregions = FALSE,
cities = TRUE,
caption = 'Zones from Johnson et al. 2017')
#' )
#'
#' mapmakR(acth7,
#'  species = 'Eriocoma thurberiana',
#'  save = FALSE,
#'  ecoregions = TRUE,
#'  cities = TRUE,
#'  caption = 'Johnson et al. 2017')
#' @returns Writes a PDF (or other specified `filetype`) to disk, and returns the ggplot object to console allowing user to modify it for other purposes.
#' @export
mapmakR <- function(x, species, save, outdir, ecoregions, cities, landscape, caption, filetype){
if(missing(species))(stop('Species Name Not supplied.'))
if(missing(save)){save <- TRUE}
if(missing(outdir)){outdir = getwd()}
if(missing(landscape)){landscape = TRUE}
if(missing(ecoregions)){ecoregions = TRUE}
if(missing(filetype)){filetype = 'pdf'}
if(missing(cities)){cities <- TRUE}
fname <- paste0(file.path(outdir, gsub(' ', '_', species)), '_STZmap.', filetype)
sf::st_agr(x) <- 'constant'
# Buffer the map so that the species only doesn't occupy the entire region.
extent <- sf::st_bbox(x)
if(cities == TRUE){
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE) |>
sf::st_transform(sf::st_crs(x))
sf::st_agr(cities.sf) <- 'constant'
cities.sf <- sf::st_crop(cities.sf, x)
}
if(ecoregions == TRUE){
omernik <- sf::st_transform(omernik, sf::st_crs(x))
sf::st_agr(omernik) <- 'constant'
omernik <- sf::st_crop(omernik, extent)
}
# ggplot does the cropping to an extent, but we'll manually specify the borders
# and what data we want here.
countries <- spData::world |>
dplyr::filter(iso_a2 %in% c('CA', 'US', 'MX')) |>
dplyr::select(name_long) |>
sf::st_transform(sf::st_crs(x))
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(x))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(
data = x,
ggplot2::aes(fill = factor(zone)),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = NA,
lwd = 0.25,
color = 'black',
alpha = 0.5) +
suppressMessages(ggspatial::annotation_scale(location = "br", width_hint = 0.25)) +
ggspatial::annotation_north_arrow(
location = "br", which_north = "true",
pad_x = ggplot2::unit(0.25, "in"), pad_y = ggplot2::unit(0.25, "in"),
height = ggplot2::unit(0.35, "in"), width = ggplot2::unit(0.35, "in")
)
states_only <- '\nStates data courtesy of US Census Bureau'
ecoTcityF <- '\nOmernik Ecoregions data courtesy of US EPA'
ecoFcityT <- '\nCities data courtesy of Simplemaps.com'
ecoTcityT <- '\nOmernik Ecoregions data courtesy of US EPA\nCities data courtesy of Simplemaps.com'
#determine the correct caption format for the data.
if(exists('caption')){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, states_only, ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, states_only, ecoTcityT)
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(states_only, ecoTcityT)
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.7, color = 'grey30') +
ggplot2::labs(caption = caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.7, color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else {
p <- p +
ggplot2::labs(caption = caption)
}
#  add on style elements which would be overwritten by the above code.
p <- p + ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F
) +
ggplot2::labs(
x = NULL, y = NULL, fill = 'Transfer\nZone',
title = paste0('*', species, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
panel.background = element_rect(fill = "aliceblue"),
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5),
legend.title = ggplot2::element_text(hjust = 0.5),
legend.position = "bottom"
)
# Determine where to put the legend. Added to the size of Portrait Plots,
# the base of landscape Plots.
if(landscape == TRUE){
p <- p + ggplot2::theme(legend.position='right')
} else {
p <- p + ggplot2::theme(legend.position='bottom')
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else {
ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
ob <- mapmakR(acth7,
species = 'Eriocoma thurberiana',
save = TRUE,
landscape = FALSE,
ecoregions = FALSE,
cities = TRUE,
caption = 'Zones from Johnson et al. 2017')
ob
#' )
#'
#' mapmakR(acth7,
#'  species = 'Eriocoma thurberiana',
#'  save = FALSE,
#'  ecoregions = TRUE,
#'  cities = TRUE,
#'  caption = 'Johnson et al. 2017')
#' @returns Writes a PDF (or other specified `filetype`) to disk, and returns the ggplot object to console allowing user to modify it for other purposes.
#' @export
mapmakR <- function(x, species, save, outdir, ecoregions, cities, landscape, caption, filetype){
if(missing(species))(stop('Species Name Not supplied.'))
if(missing(save)){save <- TRUE}
if(missing(outdir)){outdir = getwd()}
if(missing(landscape)){landscape = TRUE}
if(missing(ecoregions)){ecoregions = TRUE}
if(missing(filetype)){filetype = 'pdf'}
if(missing(cities)){cities <- TRUE}
fname <- paste0(file.path(outdir, gsub(' ', '_', species)), '_STZmap.', filetype)
sf::st_agr(x) <- 'constant'
# Buffer the map so that the species only doesn't occupy the entire region.
extent <- sf::st_bbox(x)
if(cities == TRUE){
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE) |>
sf::st_transform(sf::st_crs(x))
sf::st_agr(cities.sf) <- 'constant'
cities.sf <- sf::st_crop(cities.sf, x)
}
if(ecoregions == TRUE){
omernik <- sf::st_transform(omernik, sf::st_crs(x))
sf::st_agr(omernik) <- 'constant'
omernik <- sf::st_crop(omernik, extent)
}
# ggplot does the cropping to an extent, but we'll manually specify the borders
# and what data we want here.
countries <- spData::world |>
dplyr::filter(iso_a2 %in% c('CA', 'US', 'MX')) |>
dplyr::select(name_long) |>
sf::st_transform(sf::st_crs(x))
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(x))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(
data = x,
ggplot2::aes(fill = factor(zone)),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = NA,
lwd = 0.25,
color = 'black',
alpha = 0.5) +
suppressMessages(ggspatial::annotation_scale(location = "br", width_hint = 0.25)) +
ggspatial::annotation_north_arrow(
location = "br", which_north = "true",
pad_x = ggplot2::unit(0.25, "in"), pad_y = ggplot2::unit(0.25, "in"),
height = ggplot2::unit(0.35, "in"), width = ggplot2::unit(0.35, "in")
)
states_only <- '\nStates data courtesy of US Census Bureau'
ecoTcityF <- '\nOmernik Ecoregions data courtesy of US EPA'
ecoFcityT <- '\nCities data courtesy of Simplemaps.com'
ecoTcityT <- '\nOmernik Ecoregions data courtesy of US EPA\nCities data courtesy of Simplemaps.com'
#determine the correct caption format for the data.
if(exists('caption')){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, states_only, ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, states_only, ecoTcityT)
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(states_only, ecoTcityT)
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.7, color = 'grey30') +
ggplot2::labs(caption = caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, linewidth = 0.7, color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else {
p <- p +
ggplot2::labs(caption = caption)
}
#  add on style elements which would be overwritten by the above code.
p <- p + ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F
) +
ggplot2::labs(
x = NULL, y = NULL, fill = 'Transfer\nZone',
title = paste0('*', species, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
panel.background = element_rect(fill = "aliceblue"),
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5),
legend.title = ggplot2::element_text(hjust = 0.5),
legend.position = "bottom"
)
# Determine where to put the legend. Added to the size of Portrait Plots,
# the base of landscape Plots.
if(landscape == TRUE){
p <- p + ggplot2::theme(legend.position='right')
} else {
p <- p + ggplot2::theme(legend.position='bottom')
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else {
ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
ob <- mapmakR(acth7,
species = 'Eriocoma thurberiana',
save = TRUE,
landscape = FALSE,
ecoregions = FALSE,
cities = TRUE,
caption = 'Zones from Johnson et al. 2017')
range <- sf::st_bbox(acth7)
x_buf <- (range[['xmax']] - range[['xmin']]) * 0.025
y_buf <- (range[['ymax']] - range[['ymin']]) * 0.025
range[['xmax']] <- range[['xmax']] + x_buf
range[['xmin']] <- range[['xmin']] - x_buf
range[['ymax']] <- range[['ymax']] + y_buf
range[['ymin']] <- range[['ymin']] - y_buf
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(acth7))
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE) |>
sf::st_transform(sf::st_crs(acth7))
cities.sf <- sf::st_crop(cities.sf, acth7)
ggplot2::ggplot() +
ggplot2::geom_sf(
data = acth7,
ggplot2::aes(fill = factor(zone)),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = NA,
lwd = 0.25,
color = 'black',
alpha = 0.5) +
ggplot2::geom_sf(data = cities.sf) +
ggplot2::coord_sf(
xlim = range[c(1,3)],
ylim = range[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F)
range <- sf::st_transform(achy7) |>
sf::st_bbox()
range <- sf::st_transform(achacth7y7) |>
sf::st_bbox()
range <- sf::st_transform(acth7) |>
sf::st_bbox()
x_buf <- (range[['xmax']] - range[['xmin']]) * 0.025
y_buf <- (range[['ymax']] - range[['ymin']]) * 0.025
range[['xmax']] <- range[['xmax']] + x_buf
range[['xmin']] <- range[['xmin']] - x_buf
range[['ymax']] <- range[['ymax']] + y_buf
range[['ymin']] <- range[['ymin']] - y_buf
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(acth7))
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE) |>
sf::st_transform(sf::st_crs(acth7))
cities.sf <- sf::st_crop(cities.sf, acth7)
ggplot2::ggplot() +
ggplot2::geom_sf(
data = acth7,
ggplot2::aes(fill = factor(zone)),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = NA,
lwd = 0.25,
color = 'black',
alpha = 0.5) +
ggplot2::geom_sf(data = cities.sf) +
ggplot2::coord_sf(
xlim = range[c(1,3)],
ylim = range[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F)
roxygen2::roxygenise()
roxygen2::roxygenise()
