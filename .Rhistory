object.size(regions)
usethis::use_data(regions, overwrite = TRUE)
rm(regions_abb, regions)
library(eSTZwritR)
library(tidyverse)
# install.packages('devtools')
devtools::install_github('sagesteppe/eSTZwritR')
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
data('regions', envir=environment())
sf::st_agr(x) <- 'constant' ; sf::st_agr(regions) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(regions) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
sf::st_crs(regions)
load("/home/sagesteppe/Documents/assoRted/eSTZwritR/data/regions.rda")
regions_abb <- data.frame(
REG_NUM = 1:12,
REG_ABB = c('NAA', 'SAG', 'GL', 'MSB', 'MOB','ART',
'UCB', 'LCB', 'CPN', 'CGB', 'AK', 'PI')
)
regions <- st_read(
'doi_12_unified_regions_20180801_shapefile/DOI_12_Unified_Regions_20180801.shp') |>
select(REG_NUM, REG_NAME) |>
left_join(regions_abb) |>
sf::st_make_valid()
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
library(tidyverse)
library(sf)
regions_abb <- data.frame(
REG_NUM = 1:12,
REG_ABB = c('NAA', 'SAG', 'GL', 'MSB', 'MOB','ART',
'UCB', 'LCB', 'CPN', 'CGB', 'AK', 'PI')
)
regions <- st_read(
'doi_12_unified_regions_20180801_shapefile/DOI_12_Unified_Regions_20180801.shp') |>
select(REG_NUM, REG_NAME) |>
left_join(regions_abb) |>
sf::st_make_valid()
object.size(regions)
regions <- rmapshaper::ms_simplify(regions, keep = 0.01, keep_shapes = TRUE) |>
sf::st_transform(4326)
object.size(regions)
usethis::use_data(regions, overwrite = TRUE)
rm(regions_abb, regions)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
data('regions')
sf::st_agr(x) <- 'constant' ; sf::st_agr(regions) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(regions) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
sf::st_crs(acth7)
sf::st_crs(regions)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
data('regions')
sf::st_agr(x) <- 'constant' ; sf::st_agr(regions) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
#   sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(regions) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
#' of an empirical seed transfer zone and should be used for naming the file.
#' @param x an empirical STZ as vector data.
#' @param n a sample size for determining which interior regions cover the most area of the stz
#' defaults to 1000, sizes above a couple thousand seem gratuitous.
#' @return a list with a vector and a dataframe. The vector lists this component of the filename, at most
#' two interior regions separated by a '-'.
#' The dataframe contains a count of the number of randomly drawn points which intersect
#' interior regions. For areas with near ties we recommend increasing the sample size argument, `n` which is paseed to
#'  to st:sample.
#' @export
regionCoding <- function(x, n){
if(missing(n)){n <- 1000}
data('regions')
# sf::st_agr(x) <- 'constant' ; sf::st_agr(regions) <- 'constant'
pts <- sf::st_sample(x, size = n, type = 'regular') |>
sf::st_as_sf() |>
sf::st_transform(pts, sf::st_crs(regions)) |>
sf::st_intersection(regions) |>
sf::st_drop_geometry() |>
dplyr::count(REG_ABB) |>
dplyr::arrange(-n)
suggested_name <- pts |>
dplyr::slice_head(n = 2) |>
dplyr::pull(REG_ABB) |>
paste0(collapse = '-')
return(
list(
'SuggestedName' = suggested_name,
'RegionsCovered' = pts
)
)
}
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
) |>
sf::st_make_valid() |>
sf::st_transform(4326)
regionCoding(acth7)
roxygen2::roxygenise()
rcmdcheck::rcmdcheck()
roxygen2::roxygenise()
roxygen2::roxygenise()
plot(countries)
library(eSTZwritR)
plot(countries)
plot(countries)
plot(omernik)
plot(omernik$US_L3NAME)
plot(omernik)
regions <- sf::st_read(
file.path(
system.file(package="eSTZwritR"),  "extdata", 'regions.gpkg'
)
)
plot(regions)
plot(regions[1,])
plot(regions[,1])
regions
print(regions)
plot(regions[1:10,])
cities.sf <- file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg')
plot(cities.sf)
#' )
#'
#' mapmakR(acth7,
#'  species = 'Eriocoma thurberiana',
#'  save = FALSE,
#'  ecoregions = TRUE,
#'  cities = TRUE,
#'  caption = 'Johnson et al. 2017')
#' @returns Writes a PDF (or other specified `filetype`) to disk, and returns the ggplot object to console allowing user to modify it for other purposes.
#' @export
mapmakR <- function(x, species, save, outdir, ecoregions, cities, landscape, caption, filetype){
if(missing(species))(stop('Species Name Not supplied.'))
if(missing(save)){save <- TRUE}
if(missing(outdir)){outdir = getwd()}
if(missing(landscape)){landscape = TRUE}
if(missing(ecoregions)){ecoregions = TRUE}
if(missing(filetype)){filetype = 'pdf'}
fname <- paste0(file.path(outdir, gsub(' ', '_', species)), '_STZmap.', filetype)
if(missing(cities)){cities <- TRUE}
if(cities == TRUE){
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg')
)
}
# Buffer the map so that the species only doesn't occupy the entire region.
extent <- buffR(x)
# ggplot does the cropping to an extent, but we'll manually specify the borders
# and what data we want here.
countries <- spData::world |>
dplyr::filter(iso_a2 %in% c('CA', 'US', 'MX')) |>
dplyr::select(name_long) |>
sf::st_transform(sf::st_crs(extent))
countries <- sf::st_intersection(sf::st_as_sfc(extent), countries)
states <- tigris::states(cb = TRUE) |>
sf::st_transform(5070)
states <- sf::st_intersection(sf::st_as_sfc(extent), states)
omernik <- sf::st_intersection(sf::st_as_sfc(extent), omernik)
p <- ggplot() +
ggplot2::geom_sf(data = x, aes(fill = factor(zone)), color = NA, inherit.aes = TRUE) +
ggplot2::geom_sf(data = states, fill = NA, lwd = 0.25, color = 'black', alpha = 0.5) +
ggplot2::geom_sf(data = countries, fill = NA, lwd = 1, color = 'black') +
ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
expand = F) +
ggplot2::labs(x = NULL, y = NULL, fill = 'Zone',
title = paste0('*', species, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.title = element_text(hjust = 0.5),
legend.position = "bottom"
) +
ggspatial::annotation_scale(location = "br", width_hint = 0.25) +
ggspatial::annotation_north_arrow(location = "br", which_north = "true",
pad_x = unit(0.25, "in"), pad_y = unit(0.25, "in"),
height = unit(0.35, "in"), width = unit(0.35, "in"))
#determine the correct caption format for the data.
if(exists(caption)){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, '\nOmernik Ecoregions data courtesy of US EPA.')
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, '\nCities data courtesy of Simplemaps.com')
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, '\nOmernik Ecoregions data courtesy of US EPA.\nCities data courtesy of Simplemaps.com')
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0('Omernik Ecoregions data courtesy of US EPA.')
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0('Cities data courtesy of Simplemaps.com')
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0('Omernik Ecoregions data courtesy of US EPA.\nCities data courtesy of Simplemaps.com')
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, color = 'grey30') +
ggplot2::labs(caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
ggplot2::geom_sf_text(data = cities.sf, aes(label = City)) +
ggplot2::labs(caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = omernik, fill = NA, lty = 3, color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
ggplot2::geom_sf_text(data = cities.sf, aes(label = City)) +
ggplot2::labs(caption)
} else {
p <- p +
ggplot2::labs(caption)
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else {
ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p)
}
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg')
)
plot(cities.sf)
plot(cities.sf[,1])
acth7 <- sf::st_read(file.path(
system.file(package="eSTZwritR"), "extdata", 'ACTH7.gpkg')
)
View(acth7)
plot(acth7[,4])
terra::rast(
file.path(
system.file(package="eSTZwritR"),  "extdata", 'GAI-coarse.tif'
)
)
terra::plot(r)
r <- terra::rast(
file.path(
system.file(package="eSTZwritR"),  "extdata", 'GAI-coarse.tif'
)
)
terra::plot(r)
terra::plot(r/10000)
map.pal()
terra::map.pal()
terra::plot(r/10000, col = terra::map.pal('ryg'))
terra::plot( log(r/10000), col = terra::map.pal('ryg'))
terra::plot( sqrt(r/10000), col = terra::map.pal('ryg'))
terra::plot( log(r/10000), col = terra::map.pal('ryg'))
terra::plot( sqrt(r/10000), col = terra::map.pal('ryg'))
terra::plot( log(r/10000), col = terra::map.pal('ryg')) # better vis of low end
r <- terra::rast(
file.path(
system.file(package="eSTZwritR"),  "extdata", 'GAI-cont.tif'
)
)
terra::plot(r/10000, col = terra::map.pal('ryg'))
terra::plot(sqrt(r/10000), col = terra::map.pal('ryg'))
terra::plot(log(r/10000), col = terra::map.pal('ryg'))
roxygen2::roxygenise()
sf::st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)
sf::st_read(system.file("shape/nc.shp", package="sf"), quiet = TRUE)[,1:4]
setwd('~/Documents/EmpiricalSeedZones/GlobalAridityIndex')
library(terra)
extent <- ext(-180, -44, 14, 157)
r <- rast('ai_v3_yr.tif')
names(r) <- 'GAI'
crs(r)
r1 <- crop(r, extent)
msk <- ifel(r1 == 0, NA, 1)
r1 <- mask(r1, msk)
plot(r1)
object.size(r1)
r1
r_coarse <- aggregate(r1, fact = 4)
writeRaster(r_coarse, '../inst/extdata/GAI-coarse.tif', overwrite = T)
setwd('~/Documents/EmpiricalSeedZones/GlobalAridityIndex')
writeRaster(r_coarse, '../inst/extdata/GAI-coarse.tif', overwrite = T)
getwd()
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
r_coarse <- aggregate(r1, fact = 4)
writeRaster(r_coarse, '../inst/extdata/GAI-coarse.tif', overwrite = T)
extent <- ext(-180, -44, 14, 157)
r <- rast('ai_v3_yr.tif')
names(r) <- 'GAI'
r1 <- crop(r, extent)
msk <- ifel(r1 == 0, NA, 1)
r1 <- mask(r1, msk)
plot(r1)
object.size(r1)
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
r_coarse <- aggregate(r1, fact = 4)
writeRaster(r_coarse, '../inst/extdata/GAI-coarse.tif', overwrite = T)
# western GAI
Westextent <- ext(-125, -66, 24, 50)
r_cont <- crop(r1, Westextent)
plot(r_cont)
writeRaster(r_cont, '../inst/extdata/GAI-cont.tif', overwrite = T)
########## Repeart for Omernik Level Data ################
setwd('/media/steppe/hdd/EmpiricalSeedZones/scripts')
omernik <- st_read(
'../data/geodata/us_eco_l3/us_eco_l3.shp'
) |>
select(US_L3CODE, US_L3NAME) |>
group_by(US_L3CODE, US_L3NAME) |>
summarise(geometry = st_union(geometry)) |>
ungroup() |>
mutate(US_L3CODE = as.numeric(US_L3CODE)) |>
arrange(US_L3CODE)
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
library(tidyverse)
library(sf)
###############################################################################
# Use achy7 as a data set for all the examples from R.C. Johnson 2017
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
acth7 <- sf::st_read('./ACTH7/Achnatherum_thurberianum-WUS.shp') |>
sf::st_transform(4326) |>
sf::st_make_valid()
sf::st_write(acth7, '../inst/extdata/ACTH7.gpkg')
sf::st_write(acth7, '../inst/extdata/ACTH7.gpkg', append = FALSE)
########## Repeart for Omernik Level Data ################
setwd('/media/steppe/hdd/EmpiricalSeedZones/scripts')
omernik <- st_read(
'../data/geodata/us_eco_l3/us_eco_l3.shp'
) |>
select(US_L3CODE, US_L3NAME) |>
group_by(US_L3CODE, US_L3NAME) |>
summarise(geometry = st_union(geometry)) |>
ungroup() |>
mutate(US_L3CODE = as.numeric(US_L3CODE)) |>
arrange(US_L3CODE)
########## Repeart for Omernik Level Data ################
setwd('/media/steppe/hdd/EmpiricalSeedZones/scripts')
setwd('~/Documents/assoRted/eSTZwritR/data-raw')
########## Repeat for Omernik Level Data ################
omernik <- st_read(
'./us_eco_l3/us_eco_l3.shp'
) |>
select(US_L3CODE, US_L3NAME) |>
group_by(US_L3CODE, US_L3NAME) |>
summarise(geometry = st_union(geometry)) |>
ungroup() |>
mutate(US_L3CODE = as.numeric(US_L3CODE)) |>
arrange(US_L3CODE)
View(omernik)
omernik <- rmapshaper::ms_simplify(omernik, keep = 0.1, keep_shapes = TRUE) |>
st_transform(4326) |>
sf::st_make_valid()
plot(omernik)
########## Repeat for Omernik Level Data ################
omernik <- st_read(
'./us_eco_l3/us_eco_l3.shp'
) |>
select(US_L3CODE, US_L3NAME) |>
group_by(US_L3CODE, US_L3NAME) |>
summarise(geometry = st_union(geometry)) |>
ungroup() |>
mutate(US_L3CODE = as.numeric(US_L3CODE)) |>
arrange(US_L3CODE)
omernik <- rmapshaper::ms_simplify(omernik, keep = 1, keep_shapes = TRUE) |>
st_transform(4326) |>
sf::st_make_valid()
plot(omernik)
plot(omernik[,1])
object.size(omernik)
units(object.size(omernik), 'GiB')
?object.size
format(object.size(omernik), 'GiB')
format(object.size(omernik), 'MiB')
########## Repeat for Omernik Level Data ################
omernik <- st_read(
'./us_eco_l3/us_eco_l3.shp'
) |>
select(US_L3CODE, US_L3NAME) |>
group_by(US_L3CODE, US_L3NAME) |>
summarise(geometry = st_union(geometry)) |>
ungroup() |>
mutate(US_L3CODE = as.numeric(US_L3CODE)) |>
arrange(US_L3CODE)
omernik <- rmapshaper::ms_simplify(omernik, keep = 0.5, keep_shapes = TRUE) |>
st_transform(4326) |>
sf::st_make_valid()
plot(omernik[,1])
format(object.size(omernik), 'MiB')
########## Repeat for Omernik Level Data ################
omernik <- st_read(
'./us_eco_l3/us_eco_l3.shp'
) |>
select(US_L3CODE, US_L3NAME) |>
group_by(US_L3CODE, US_L3NAME) |>
summarise(geometry = st_union(geometry)) |>
ungroup() |>
mutate(US_L3CODE = as.numeric(US_L3CODE)) |>
arrange(US_L3CODE)
omernik <- rmapshaper::ms_simplify(omernik, keep = 0.05, keep_shapes = TRUE) |>
st_transform(4326) |>
sf::st_make_valid()
plot(omernik[,1])
format(object.size(omernik), 'MiB')
setwd('/media/steppe/hdd/eSTZwritR')
setwd('~/Documents/assoRted/eSTZwritR')
usethis::use_data(omernik)
setwd('~/Documents/assoRted/eSTZwritR', overwrite = TRUE)
usethis::use_data(omernik, overwrite = TRUE)
