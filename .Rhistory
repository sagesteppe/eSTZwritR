ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p) # also return the plot to user.
}
#'  save = FALSE,
#'  landscape = FALSE,
#'  ecoregions = TRUE,
#'  cities = TRUE,
#'  SZName = zone,
#'  caption = 'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
#'  )
#'  plot(p)
#' @returns Writes a PDF (or other specified `filetype`) to disk, and returns the ggplot object to console allowing user to modify it for other purposes.
#' @export
mapmakR <- function(x, sci_name, save, outpath, ecoregions, cities, landscape, caption, filetype, buf_prcnt, SZName = SZName){
if(missing(sci_name))(stop('Species Name Not supplied.'))
if(missing(save)){save <- TRUE}
if(missing(outpath)){outpath = getwd()}
if(missing(landscape)){landscape = TRUE}
if(missing(ecoregions)){ecoregions = TRUE}
if(missing(filetype)){filetype = 'pdf'}
if(missing(cities)){cities <- TRUE}
if(missing(buf_prcnt)){buf_prcnt <- 0.025}
SZName <- dplyr::enquo(SZName)
fname <- paste0(file.path(outpath, gsub(' ', '_', sci_name)), '_STZmap.', filetype)
sf::st_agr(x) <- 'constant'
# Buffer the map so that the species only doesn't occupy the entire region.
extent <- buffR(x, buf_prcnt)
if(cities == TRUE){
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE) |>
sf::st_transform(sf::st_crs(x))
sf::st_agr(cities.sf) <- 'constant'
cities.sf <- sf::st_crop(cities.sf, x)
}
if(ecoregions == TRUE){
omernik <- sf::st_transform(omernik, sf::st_crs(x))
sf::st_agr(omernik) <- 'constant'
}
# ggplot does the cropping to an extent, but we'll manually specify the borders
# and what data we want here.
countries <- spData::world |>
dplyr::filter(iso_a2 %in% c('CA', 'US', 'MX')) |>
dplyr::select(name_long) |>
sf::st_transform(sf::st_crs(x))
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(x))
x <- dplyr::mutate(x, SZName = forcats::as_factor(!!SZName))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(
data = countries,
fill = 'cornsilk',
color = NA,
inherit.aes = FALSE
) +
ggplot2::geom_sf(
data = x,
ggplot2::aes(fill = SZName),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = 'cornsilk',
lwd = 0.25,
color = 'black',
alpha = 0.5) +
ggspatial::annotation_scale(location = "br", width_hint = 0.25) +
ggspatial::annotation_north_arrow(
location = "br", which_north = "true",
pad_x = ggplot2::unit(0.25, "in"), pad_y = ggplot2::unit(0.25, "in"),
height = ggplot2::unit(0.35, "in"), width = ggplot2::unit(0.35, "in")
)
caption <- paste0(caption, '. CRS: ', sf::st_crs(x)[[1]])
states_only <- '\nStates data courtesy of US Census Bureau'
ecoTcityF <- '. Omernik ecoregions courtesy of US EPA'
ecoFcityT <- '. Cities courtesy of Simplemaps.com'
ecoTcityT <- '. Omernik ecoregions courtesy of US EPA. Cities courtesy of Simplemaps.com'
#determine the correct caption format for the data.
if(exists('caption')){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, states_only, ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, states_only, ecoTcityT)
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(states_only, ecoTcityT)
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(
data = omernik,
fill = NA,
lty = 3,
linewidth = 0.5,
color = 'grey30') +
ggplot2::labs(caption = caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(
data = omernik,
fill = NA,
lty = 3,
linewidth = 0.5,
color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else {
p <- p +
ggplot2::labs(caption = caption)
}
#  add on style elements which would be overwritten by the above code.
p <- p + ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F
) +
ggplot2::labs(
x = NULL, y = NULL, fill = 'Transfer\nZone',
title = paste0('*', sci_name, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "aliceblue"),
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5),
legend.title = ggplot2::element_text(hjust = 0.5)
)
# Determine where to put the legend. Added to the size of Portrait Plots,
# the base of landscape Plots.
if(landscape == TRUE){
p <- p + ggplot2::theme(legend.position='right')
} else if (landscape == FALSE){
p <- p + ggplot2::theme(
legend.position='bottom',
legend.justification = "left",
)
}
# If there are tons of seed zones, then increase the number of columns, this only
# seems to be an issue with > 40 categories, where ggplot maxes out default columns
# to 5.
lvls <- length(unique(x[[SZName]]))
if(lvls>40){
p <- p + ggplot2::guides(fill = ggplot2::guide_legend(ncol = round(lvls/5)))
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else if (landscape == FALSE){
ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p) # also return the plot to user.
}
ob <- wrapper(x = fnames[[grep('spp._vaseyana', fnames)]],
SeedZone = 'GRIDCODE', nrcs_code = 'ARTRV',
sci_name = 'Artemisia_tridentata_spp_vaseyana', ls = FALSE,
estz_type = 'cm',
caption = 'Data from Richardson, B. A., & Chaney, L. (2018). https://doi.org/10.1002/eap.1804')
#'  save = FALSE,
#'  landscape = FALSE,
#'  ecoregions = TRUE,
#'  cities = TRUE,
#'  SZName = zone,
#'  caption = 'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
#'  )
#'  plot(p)
#' @returns Writes a PDF (or other specified `filetype`) to disk, and returns the ggplot object to console allowing user to modify it for other purposes.
#' @export
mapmakR <- function(x, sci_name, save, outpath, ecoregions, cities, landscape, caption, filetype, buf_prcnt, SZName = SZName){
if(missing(sci_name))(stop('Species Name Not supplied.'))
if(missing(save)){save <- TRUE}
if(missing(outpath)){outpath = getwd()}
if(missing(landscape)){landscape = TRUE}
if(missing(ecoregions)){ecoregions = TRUE}
if(missing(filetype)){filetype = 'pdf'}
if(missing(cities)){cities <- TRUE}
if(missing(buf_prcnt)){buf_prcnt <- 0.025}
SZName <- dplyr::enquo(SZName)
fname <- paste0(file.path(outpath, gsub(' ', '_', sci_name)), '_STZmap.', filetype)
sf::st_agr(x) <- 'constant'
# Buffer the map so that the species only doesn't occupy the entire region.
extent <- buffR(x, buf_prcnt)
if(cities == TRUE){
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE) |>
sf::st_transform(sf::st_crs(x))
sf::st_agr(cities.sf) <- 'constant'
cities.sf <- sf::st_crop(cities.sf, x)
}
if(ecoregions == TRUE){
omernik <- sf::st_transform(omernik, sf::st_crs(x))
sf::st_agr(omernik) <- 'constant'
}
# ggplot does the cropping to an extent, but we'll manually specify the borders
# and what data we want here.
countries <- spData::world |>
dplyr::filter(iso_a2 %in% c('CA', 'US', 'MX')) |>
dplyr::select(name_long) |>
sf::st_transform(sf::st_crs(x))
states <- tigris::states(cb = TRUE, progress_bar = FALSE, year = 2022) |>
sf::st_transform(sf::st_crs(x))
x <- dplyr::mutate(x, SZName = forcats::as_factor(!!SZName))
p <- ggplot2::ggplot() +
ggplot2::geom_sf(
data = countries,
fill = 'cornsilk',
color = NA,
inherit.aes = FALSE
) +
ggplot2::geom_sf(
data = x,
ggplot2::aes(fill = SZName),
color = NA,
inherit.aes = TRUE) +
ggplot2::geom_sf(
data = states,
fill = 'cornsilk',
lwd = 0.25,
color = 'black',
alpha = 0.5) +
ggspatial::annotation_scale(location = "br", width_hint = 0.25) +
ggspatial::annotation_north_arrow(
location = "br", which_north = "true",
pad_x = ggplot2::unit(0.25, "in"), pad_y = ggplot2::unit(0.25, "in"),
height = ggplot2::unit(0.35, "in"), width = ggplot2::unit(0.35, "in")
)
caption <- paste0(caption, '. CRS: ', sf::st_crs(x)[[1]])
states_only <- '\nStates data courtesy of US Census Bureau'
ecoTcityF <- '. Omernik ecoregions courtesy of US EPA'
ecoFcityT <- '. Cities courtesy of Simplemaps.com'
ecoTcityT <- '. Omernik ecoregions courtesy of US EPA. Cities courtesy of Simplemaps.com'
#determine the correct caption format for the data.
if(exists('caption')){
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(caption, states_only, ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(caption, states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(caption, states_only, ecoTcityT)
}
} else {
if(ecoregions == TRUE & cities == FALSE){
caption <- paste0(ecoTcityF)
} else if(ecoregions == FALSE & cities == TRUE){
caption <- paste0(states_only, ecoFcityT)
} else if(ecoregions == TRUE & cities == TRUE){
caption <- paste0(states_only, ecoTcityT)
}
}
# determine whether to add cities and ecoregions to the plot.
if(ecoregions == TRUE & cities == FALSE){
p <- p +
ggplot2::geom_sf(
data = omernik,
fill = NA,
lty = 3,
linewidth = 0.5,
color = 'grey30') +
ggplot2::labs(caption = caption)
} else if(ecoregions == FALSE & cities == TRUE){
p <- p +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else if(ecoregions == TRUE & cities == TRUE){
p <- p +
ggplot2::geom_sf(
data = omernik,
fill = NA,
lty = 3,
linewidth = 0.5,
color = 'grey30') +
ggplot2::geom_sf(data = cities.sf) +
suppressWarnings(
ggrepel::geom_text_repel(
data = cities.sf,
ggplot2::aes(label = City, geometry = geom),
stat = "sf_coordinates")
) +
ggplot2::labs(caption = caption)
} else {
p <- p +
ggplot2::labs(caption = caption)
}
#  add on style elements which would be overwritten by the above code.
p <- p + ggplot2::coord_sf(
xlim = extent[c(1,3)],
ylim = extent[c(2,4)],
default_crs = sf::st_crs(4326),
expand = F
) +
ggplot2::labs(
x = NULL, y = NULL, fill = 'Transfer\nZone',
title = paste0('*', sci_name, '*'),
subtitle = 'Seed Transfer Zones') +
ggplot2::theme(
panel.background = ggplot2::element_rect(fill = "aliceblue"),
plot.title = ggtext::element_markdown(hjust = 0.5),
plot.subtitle = ggplot2::element_text(hjust = 0.5),
legend.title = ggplot2::element_text(hjust = 0.5)
)
# Determine where to put the legend. Added to the size of Portrait Plots,
# the base of landscape Plots.
if(landscape == TRUE){
p <- p + ggplot2::theme(legend.position='right')
} else if (landscape == FALSE){
p <- p + ggplot2::theme(
legend.position='bottom',
legend.justification = "left",
)
}
# If there are tons of seed zones, then increase the number of columns, this only
# seems to be an issue with > 40 categories, where ggplot maxes out default columns
# to 5.
lvls <- length(unique(x[['SZName']]))
if(lvls>40){
p <- p + ggplot2::guides(fill = ggplot2::guide_legend(ncol = round(lvls/5)))
}
# save file to location
if(save==TRUE){
if(landscape == TRUE){
ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 8.5, width = 11, units = 'in')
} else if (landscape == FALSE){
ggplot2::ggsave(filename = fname,
plot = p, dpi = 300, height = 11, width = 8.5, units = 'in')
}
message('File saved to: ', fname)
}
return(p) # also return the plot to user.
}
ob <- wrapper(x = fnames[[grep('spp._vaseyana', fnames)]],
SeedZone = 'GRIDCODE', nrcs_code = 'ARTRV',
sci_name = 'Artemisia_tridentata_spp_vaseyana', ls = FALSE,
estz_type = 'cm',
caption = 'Data from Richardson, B. A., & Chaney, L. (2018). https://doi.org/10.1002/eap.1804')
setwd('~/Documents/assoRted/eSTZwritR')
cities <- read.csv('./data-raw/simplemaps_uscities_basicv1.79/uscities.csv') |>
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) |>
select(city, state_id, county_name, population) |>
# only one city per county. regardless of county size.
group_by(state_id, county_name) |>
slice_max(population, n = 1)
ggplot(data = cities) +
geom_sf()
View(cities)
library(sf)
library(tidyverse)
# we need a set of cities for cartography purposes, we want the big cities, or at least
# moderately sized cities which show up OK.
setwd('~/Documents/assoRted/eSTZwritR')
cities <- read.csv('./data-raw/simplemaps_uscities_basicv1.79/uscities.csv') |>
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) |>
select(city, state_id, county_name, population) |>
# only one city per county. regardless of county size.
group_by(state_id, county_name) |>
slice_max(population, n = 1)
ggplot(data = cities) +
geom_sf()
# now some more advanced filtering. Only one city per 50 miles in distance,
# we use this to get rid of suburbs.
cit_buf <- sf::st_transform(cities, 5070) |>
sf::st_buffer(80468)
ints <- sf::st_intersects( sf::st_transform(cities, 5070), cit_buf)
keep <- cities[ unlist(ints[lengths(ints) == 1]), ]
investigate <-ints[lengths(ints) > 1]
unique_investigations <- investigate[!duplicated(lapply(investigate, sort))]
rm(ints, investigate)
# from each of these vectors, select the city with the largest population.
subbr <- function(x, y){
subset <- y[unlist(x), ]
out <- subset[which.max(subset$population),]
return(out)
}
out <- lapply(unique_investigations, subbr, y = cities) |>
dplyr::bind_rows(keep) |>
distinct(.keep_all = TRUE)  # remove the repeated cities
# Now only up to 10 cities per state.
cartographic_cities <- out |>
group_by(state_id) |>
slice_max(population, n = 8) |>
sf::st_transform(4326)
ggplot(data = cartographic_cities) +
geom_sf()
#######################################################################
# now repeat the process one more time, we have a couple oddities that
# came through on corner cases that should be easily fixed with fewer intercepts #
cit_buf <- sf::st_transform(cartographic_cities, 5070) |>
sf::st_buffer(80468)
ints <- sf::st_intersects( sf::st_transform(cartographic_cities, 5070), cit_buf)
keep <- cartographic_cities[ unlist(ints[lengths(ints) == 1]), ]
investigate <-ints[lengths(ints) > 1]
unique_investigations <- investigate[!duplicated(lapply(investigate, sort))]
cartographic_cities <- lapply(ints, subbr, y = cartographic_cities) |>
dplyr::bind_rows(keep) |>
distinct(.keep_all = TRUE) #|>
View(cartographic_cities)
library(sf)
library(tidyverse)
# we need a set of cities for cartography purposes, we want the big cities, or at least
# moderately sized cities which show up OK.
setwd('~/Documents/assoRted/eSTZwritR')
cities <- read.csv('./data-raw/simplemaps_uscities_basicv1.79/uscities.csv') |>
sf::st_as_sf(coords = c('lng', 'lat'), crs = 4326) |>
select(city, state_id, county_name, population) |>
# only one city per county. regardless of county size.
group_by(state_id, county_name) |>
slice_max(population, n = 1)
ggplot(data = cities) +
geom_sf()
# now some more advanced filtering. Only one city per 50 miles in distance,
# we use this to get rid of suburbs.
cit_buf <- sf::st_transform(cities, 5070) |>
sf::st_buffer(80468)
ints <- sf::st_intersects( sf::st_transform(cities, 5070), cit_buf)
keep <- cities[ unlist(ints[lengths(ints) == 1]), ]
investigate <-ints[lengths(ints) > 1]
unique_investigations <- investigate[!duplicated(lapply(investigate, sort))]
rm(ints, investigate)
# from each of these vectors, select the city with the largest population.
subbr <- function(x, y){
subset <- y[unlist(x), ]
out <- subset[which.max(subset$population),]
return(out)
}
out <- lapply(unique_investigations, subbr, y = cities) |>
dplyr::bind_rows(keep) |>
distinct(.keep_all = TRUE)  # remove the repeated cities
# Now only up to 10 cities per state.
cartographic_cities <- out |>
group_by(state_id) |>
slice_max(population, n = 8) |>
sf::st_transform(4326)
ggplot(data = cartographic_cities) +
geom_sf()
#######################################################################
# now repeat the process one more time, we have a couple oddities that
# came through on corner cases that should be easily fixed with fewer intercepts #
cit_buf <- sf::st_transform(cartographic_cities, 5070) |>
sf::st_buffer(80468)
ints <- sf::st_intersects( sf::st_transform(cartographic_cities, 5070), cit_buf)
keep <- cartographic_cities[ unlist(ints[lengths(ints) == 1]), ]
investigate <-ints[lengths(ints) > 1]
unique_investigations <- investigate[!duplicated(lapply(investigate, sort))]
cartographic_cities <- lapply(ints, subbr, y = cartographic_cities) |>
dplyr::bind_rows(keep) |>
distinct(.keep_all = TRUE) |>
select(City = city, State = state_id, Population = population) |>
rename(geometry = geom)
View(cartographic_cities)
sf::st_write(cartographic_cities, "inst/extdata/Carto_cities.gpkg", append = F)
rm(subbr, keep, unique_investigations, cities, out, cit_buf, ints, investigate, cartographic_cities)
wrapper(x = st_read(fnames[[grep('Eriocoma_hymenoides', fnames)]]) |> select(-area_ha, -zone),
SeedZone = 'GRIDCODE',  nrcs_code = 'ACHY',
sci_name = 'Eriocoma_hymenoides',
estz_type = 'cg',
caption = 'Data from Johnson et al. 2012. https://doi.org/10.2111/REM-D-11-00165.1')
#'  save = FALSE,
#'  landscape = FALSE,
#'  ecoregions = TRUE,
#'  cities = TRUE,
#'  SZName = zone,
#'  caption = 'Data from Johnson et al. 2017. https://doi.org/10.1016/j.rama.2017.01.004'
#'  )
#'  plot(p)
#' @returns Writes a PDF (or other specified `filetype`) to disk, and returns the ggplot object to console allowing user to modify it for other purposes.
#' @export
mapmakR <- function(x, sci_name, save, outpath, ecoregions, cities, city_reduce, city_reduce_no landscape, caption, filetype, buf_prcnt, SZName = SZName){
?st_sample
cities.sf <- sf::st_read(
file.path(
system.file(package ='eSTZwritR'), 'extdata', 'Carto_cities.gpkg'), quiet = TRUE)
View(cities.sf)
